AWSTemplateFormatVersion: 2010-09-09

Description: |
  CloudFormation Template for Roman Numerals Converter Application. This template creates Python Flask Web Application on Amazon Linux 2 (XXXXXXXXXXXXXXXXX) EC2 Instance with custom security group allowing http connections on port 80.
  Roman Numerals Converter Application is downloaded from Github repository, then installed on Flask.


Parameters:
  KeyPairName:
    Description: Enter the name of your KeyPair for SSH and HTTP connections 
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must one of the exixting EC2 KeyPair  
    
Resources:
  MySecGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable HHTP for Flask Web Server #required
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80 
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22 
          ToPort: 22
          CidrIp: 0.0.0.0/0
    
  WebServerHost:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: ami-0947d2ba12ee1ff75
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref MySecGroup
      Tags:
        -
          Key: Name
          Value: !Sub Web Server of ${AWS::StackName} Stack
      UserData:
        Fn::Base64:
          !Sub |
          #! /bin/bash
          yum update -y
          yum install python3 -y
          pip3 install flask
          cd /home/ec2-user
          wget https://raw.githubusercontent.com/Gokay2705/Clarusway.AWS.Work.Shop/master/aws/projects/002-milliseconds-converter/app.py
          wget -P templates https://raw.githubusercontent.com/Gokay2705/Clarusway.AWS.Work.Shop/master/aws/projects/002-milliseconds-converter/templates/index.html
          wget -P templates https://raw.githubusercontent.com/Gokay2705/Clarusway.AWS.Work.Shop/master/aws/projects/002-milliseconds-converter/templates/result.html
          python3 app.py

  MyAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones: !GetAZs 
      DesiredCapacity: 2
      HealthCheckGracePeriod: 90
      HealthCheckType: ELB
      InstanceId: String
      LaunchConfigurationName: !Ref WebServerHost
      MaxSize: 3 #required
      MinSize: 1 #required
      TargetGroupARNs:
        - !Ref MyALBTargetGroup

  
MyApplicationLoadBalancer:
  Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
  Properties:
    IpAddressType: String
    LoadBalancerAttributes:
      - LoadBalancerAttribute
    Name: String
    Scheme: String
    SecurityGroups:
      - String
    SubnetMappings:
      - SubnetMapping
    Subnets:
      - String
    Tags:
      - Tag
    Type: String

  myApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      SecurityGroups:
        - !GetAtt mySecurityGroup.GroupId
      Subnets: !Ref Subnets  
  myALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref myALBTargetGroup
      LoadBalancerArn: !Ref myApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  MyALBTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 25
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 3
      VpcId: !Ref VpcId


Outputs:
  WebURL:
    Value: !Sub 
      - http://${PublicAddress}
      - PublicAddress: !GetAtt WebServerHost.PublicDnsName
    Description: Project 001 Website URL